#+SETUPFILE: theme.setup
#+TITLE: Election Algorithms

* Cyclic Networks

** Assumptions
   - All processes have the same local algorithm
   - the algorithm is /decentralised/
   - Process ID's are /unique/ and form a /totally ordered/ set

** Chang-Roberts (Directed Ring)
   - Initially only initiators are *active* and send msg with their id's
   - Passive processes (including non initiators) only pass on the messages

*** (active) P receives msg q
    - if $q < p$ \rightarrow p dismisses the message
    - if $q > p$ \rightarrow p becomes *passive* and forwards the msg
    - if $q = p$ \rightarrow p becomes the leader (msg has travelled all the way
      around)

*** Complexity
    - Worst-case msg complexity: $O(N^2)$
    - Avg-case msg complexity: $O(NlogN)$

      #+attr_html: :width 600px
     [[./chang-roberts-example.png]]

** Franklin's (Underacted Ring)
   - Each active process p compares its own id with id of 2 nearest neighbours
   - if a neighbour has a larger id, p becomes passive
   - Done in a number of rounds
   - Passive processes pass on messages

*** Round Structure
    - In each round *active* process P:
      - Sends its id to its nearest neighbours
      - Receives id's *Q* and *R*
        - if $max(q,r) < p$, \rightarrow p starts *new round* (survives to next round)
        - if $max(q,r) > p$, \rightarrow p becomes *passive*
        - if $max(q,r) = p$, \rightarrow p becomes the *leader*

*** Complexity
    - Worst-case msg complexity: $O(NlogN)$
      - in each round at least half of the active processes becomes passive
    - Each round takes $2N$ messages

    - Suppose ring is directed with clockwise orientation (id increasing
      clockwise)
      - If a process only compares its id with one of its predecessors it would
        take N rounds to complete

*** TODO Give an example with N = 4 that takes 3 rounds

*** TODO Show that for any N there is a ring that takes 2 rounds

** Dolev-Klawe-Rodeh (Directed Ring)
   - Essentially Franklin's algorithm adapted to work on directed networks
*** How it works
   - The comparison of id's of an active process p and its neighbours q and r is
     performed at r
     - $\rightarrow s \rightarrow q \rightarrow *p* \rightarrow r \rightarrow t \rightarrow$
   - if $max(q,r) < p$ then r *changes its id to p* and sends out p
   - if $max(q,r) > p$ then r becomes passive
   - if $max(q,r) = p$ then r *announces p* to all processes
   - process that originally had p notices announcement and becomes the leader
* Acyclic Networks
** Tree Election
   - Tree algorithms can be used to elect leader
   - Start with a *wake-up* phase driven by initiators
     - send wake-up message to all neighbours
     - when non-initiator receives first wake-up message it wakes up and sends a
       wake-up message to neighbours
*** Actions at awake process p
    - p waits until it receives id from all neighbours except 1
      - the neighbour not waited for becomes p's parent *(parent_p)*
    - p computes the largest id *(max_p)* from the id's received and its own id
    - p sends parent request to *parent_p* tagged with *max_p*
    - if p  receives a parent request from its parent, tagged with q, it computes max'_p.
      - $max'_p = max(max_p, q)$
    - p sends information message to all neighbours (except parent) tagged with
      max'_p
    - the information messages is forwarded through the network
    - the process with id max'_p becomes the *leader*
** Echo Algorithm
   - Each initiator starts a *wave* tagged with its id's
   - Non-initiators join the first wave that hits them
   - Each process takes part in *at most* 1 wave
*** Process p in wave q hit by wave r
    - if $q < r$ \rightarrow p changes to wave r (abandons earlier messages)
    - if $q > r$ \rightarrow p continues with wave q (dismisses wave r message)
    - if $q = r$ \rightarrow incoming message is treated according to echo algorithm
    - if wave p executes
